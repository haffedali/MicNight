{
  "_args": [
    [
      {
        "raw": "resolve@^1.11.0",
        "scope": null,
        "escapedName": "resolve",
        "name": "resolve",
        "rawSpec": "^1.11.0",
        "spec": ">=1.11.0 <2.0.0",
        "type": "range"
      },
      "C:\\programs\\projects\\MicNight\\node_modules\\eslint-plugin-import"
    ]
  ],
  "_from": "resolve@^1.11.0",
  "_hasShrinkwrap": false,
  "_id": "resolve@1.14.2",
  "_location": "/resolve",
  "_nodeVersion": "13.5.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/resolve_1.14.2_1578362193576_0.46297596925560036"
  },
  "_npmUser": {
    "name": "ljharb",
    "email": "ljharb@gmail.com"
  },
  "_npmVersion": "6.13.4",
  "_phantomChildren": {},
  "_requested": {
    "raw": "resolve@^1.11.0",
    "scope": null,
    "escapedName": "resolve",
    "name": "resolve",
    "rawSpec": "^1.11.0",
    "spec": ">=1.11.0 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/eslint-import-resolver-node",
    "/eslint-plugin-import",
    "/eslint-plugin-react",
    "/normalize-package-data"
  ],
  "_resolved": "https://registry.npmjs.org/resolve/-/resolve-1.14.2.tgz",
  "_shasum": "dbf31d0fa98b1f29aa5169783b9c290cb865fea2",
  "_shrinkwrap": null,
  "_spec": "resolve@^1.11.0",
  "_where": "C:\\programs\\projects\\MicNight\\node_modules\\eslint-plugin-import",
  "author": {
    "name": "James Halliday",
    "email": "mail@substack.net",
    "url": "http://substack.net"
  },
  "bugs": {
    "url": "https://github.com/browserify/resolve/issues"
  },
  "dependencies": {
    "path-parse": "^1.0.6"
  },
  "description": "resolve like require.resolve() on behalf of files asynchronously and synchronously",
  "devDependencies": {
    "@ljharb/eslint-config": "^15.0.2",
    "array.prototype.map": "^1.0.2",
    "eslint": "^6.7.2",
    "object-keys": "^1.1.1",
    "safe-publish-latest": "^1.1.4",
    "tap": "0.4.13",
    "tape": "^4.12.0"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-EjlOBLBO1kxsUxsKjLt7TAECyKW6fOh1VRkykQkKGzcBbjjPIxBqGh0jf7GJ3k/f5mxMqW3htMD3WdTUVtW8HQ==",
    "shasum": "dbf31d0fa98b1f29aa5169783b9c290cb865fea2",
    "tarball": "https://registry.npmjs.org/resolve/-/resolve-1.14.2.tgz",
    "fileCount": 90,
    "unpackedSize": 95398,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJeE+VSCRA9TVsSAnZWagAAqW8QAKB4nGqr7jiv8ZzTLhDp\ngF5ruRin+rIT6Nl30IDUB1klfXs/INzoUnsKVE2pDgCZLqd1xDagOsJRXKGd\ndH+H/0vveJ1cZcu1eDsbTKnDtmbF+QgzNU+K7DqRkT10Nwl0Vgly1ew+Cn12\nfjkLWM6RPza6MMRe3jF7YE4KzuuvJCmrOSnoHtGl+/P3x74qDxDvj9RsdvrR\n3VuZXJ96N1qM5wxXSKBE2Ot0aY4yBYhDpKQHTYthOoedS3cdmw4TkwxJdfm1\nhXyY8rjWkrt6aHrZav5mP8c14GtwTwWfQWBNm2dN0SMMtuddwmqSNGGGuDSs\ncWaDTfCssCpNjH1s9tXwwbgdIqxRDpNl6zgUhYxdpz7MeIV62/cKhkMC3zga\nMENPDtivE16Dw0h9gEVBqZ5mvd3RguO0/LA7OPrIiG0iiwkG/1NjftDuizUq\nxpTYp0HZjuSM9wPPIZea9NOtGzXXq35KcvH6FDvPL7XHdidTJPr5fOLlzVa1\nRzrdQTiLUiSoD4spHAoHPc9OAZf7ObancUoWu0mqpr8wiJ6ad3VO+0X0d3W3\nrLgQ5D4oQSV15Xn9CSvExH5pVLaJDacjoL6M5pWF8VOqlIyr3c36O9EUOkc7\nXSq8aB4BSwMs+itHtXf7TL8A3NX4OKVWaoWGUbq6KnL4zK8W1bgtdiW7+M2O\nLtmb\r\n=5Yfo\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "funding": {
    "url": "https://github.com/sponsors/ljharb"
  },
  "gitHead": "9fea81aa462683ddb6f9de53ac4fd258399754ea",
  "homepage": "https://github.com/browserify/resolve#readme",
  "keywords": [
    "resolve",
    "require",
    "node",
    "module"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "ljharb",
      "email": "ljharb@gmail.com"
    },
    {
      "name": "substack",
      "email": "substack@gmail.com"
    }
  ],
  "name": "resolve",
  "optionalDependencies": {},
  "readme": "# resolve\n\nimplements the [node `require.resolve()`\nalgorithm](https://nodejs.org/api/modules.html#modules_all_together)\nsuch that you can `require.resolve()` on behalf of a file asynchronously and\nsynchronously\n\n[![build status](https://secure.travis-ci.org/browserify/resolve.png)](http://travis-ci.org/browserify/resolve)\n\n# example\n\nasynchronously resolve:\n\n```js\nvar resolve = require('resolve');\nresolve('tap', { basedir: __dirname }, function (err, res) {\n    if (err) console.error(err);\n    else console.log(res);\n});\n```\n\n```\n$ node example/async.js\n/home/substack/projects/node-resolve/node_modules/tap/lib/main.js\n```\n\nsynchronously resolve:\n\n```js\nvar resolve = require('resolve');\nvar res = resolve.sync('tap', { basedir: __dirname });\nconsole.log(res);\n```\n\n```\n$ node example/sync.js\n/home/substack/projects/node-resolve/node_modules/tap/lib/main.js\n```\n\n# methods\n\n```js\nvar resolve = require('resolve');\n```\n\n## resolve(id, opts={}, cb)\n\nAsynchronously resolve the module path string `id` into `cb(err, res [, pkg])`, where `pkg` (if defined) is the data from `package.json`.\n\noptions are:\n\n* opts.basedir - directory to begin resolving from\n\n* opts.package - `package.json` data applicable to the module being loaded\n\n* opts.extensions - array of file extensions to search in order\n\n* opts.readFile - how to read files asynchronously\n\n* opts.isFile - function to asynchronously test whether a file exists\n\n* opts.isDirectory - function to asynchronously test whether a directory exists\n\n* `opts.packageFilter(pkg, pkgfile, dir)` - transform the parsed package.json contents before looking at the \"main\" field\n  * pkg - package data\n  * pkgfile - path to package.json\n  * dir - directory for package.json\n\n* `opts.pathFilter(pkg, path, relativePath)` - transform a path within a package\n  * pkg - package data\n  * path - the path being resolved\n  * relativePath - the path relative from the package.json location\n  * returns - a relative path that will be joined from the package.json location\n\n* opts.paths - require.paths array to use if nothing is found on the normal `node_modules` recursive walk (probably don't use this)\n\n  For advanced users, `paths` can also be a `opts.paths(request, start, opts)` function\n    * request - the import specifier being resolved\n    * start - lookup path\n    * getNodeModulesDirs - a thunk (no-argument function) that returns the paths using standard `node_modules` resolution\n    * opts - the resolution options\n\n* opts.moduleDirectory - directory (or directories) in which to recursively look for modules. default: `\"node_modules\"`\n\n* opts.preserveSymlinks - if true, doesn't resolve `basedir` to real path before resolving.\nThis is the way Node resolves dependencies when executed with the [--preserve-symlinks](https://nodejs.org/api/all.html#cli_preserve_symlinks) flag.\n**Note:** this property is currently `true` by default but it will be changed to\n`false` in the next major version because *Node's resolution algorithm does not preserve symlinks by default*.\n\ndefault `opts` values:\n\n```js\n{\n    paths: [],\n    basedir: __dirname,\n    extensions: ['.js'],\n    readFile: fs.readFile,\n    isFile: function isFile(file, cb) {\n        fs.stat(file, function (err, stat) {\n            if (!err) {\n                return cb(null, stat.isFile() || stat.isFIFO());\n            }\n            if (err.code === 'ENOENT' || err.code === 'ENOTDIR') return cb(null, false);\n            return cb(err);\n        });\n    },\n    isDirectory: function isDirectory(dir, cb) {\n        fs.stat(dir, function (err, stat) {\n            if (!err) {\n                return cb(null, stat.isDirectory());\n            }\n            if (err.code === 'ENOENT' || err.code === 'ENOTDIR') return cb(null, false);\n            return cb(err);\n        });\n    },\n    moduleDirectory: 'node_modules',\n    preserveSymlinks: true\n}\n```\n\n## resolve.sync(id, opts)\n\nSynchronously resolve the module path string `id`, returning the result and\nthrowing an error when `id` can't be resolved.\n\noptions are:\n\n* opts.basedir - directory to begin resolving from\n\n* opts.extensions - array of file extensions to search in order\n\n* opts.readFile - how to read files synchronously\n\n* opts.isFile - function to synchronously test whether a file exists\n\n* opts.isDirectory - function to synchronously test whether a directory exists\n\n* `opts.packageFilter(pkg, dir)` - transform the parsed package.json contents before looking at the \"main\" field\n  * pkg - package data\n  * dir - directory for package.json (Note: the second argument will change to \"pkgfile\" in v2)\n\n* `opts.pathFilter(pkg, path, relativePath)` - transform a path within a package\n  * pkg - package data\n  * path - the path being resolved\n  * relativePath - the path relative from the package.json location\n  * returns - a relative path that will be joined from the package.json location\n\n* opts.paths - require.paths array to use if nothing is found on the normal `node_modules` recursive walk (probably don't use this)\n\n* opts.moduleDirectory - directory (or directories) in which to recursively look for modules. default: `\"node_modules\"`\n\n* opts.preserveSymlinks - if true, doesn't resolve `basedir` to real path before resolving.\nThis is the way Node resolves dependencies when executed with the [--preserve-symlinks](https://nodejs.org/api/all.html#cli_preserve_symlinks) flag.\n**Note:** this property is currently `true` by default but it will be changed to\n`false` in the next major version because *Node's resolution algorithm does not preserve symlinks by default*.\n\ndefault `opts` values:\n\n```js\n{\n    paths: [],\n    basedir: __dirname,\n    extensions: ['.js'],\n    readFileSync: fs.readFileSync,\n    isFile: function isFile(file) {\n        try {\n            var stat = fs.statSync(file);\n        } catch (e) {\n            if (e && (e.code === 'ENOENT' || e.code === 'ENOTDIR')) return false;\n            throw e;\n        }\n        return stat.isFile() || stat.isFIFO();\n    },\n    isDirectory: function isDirectory(dir) {\n        try {\n            var stat = fs.statSync(dir);\n        } catch (e) {\n            if (e && (e.code === 'ENOENT' || e.code === 'ENOTDIR')) return false;\n            throw e;\n        }\n        return stat.isDirectory();\n    },\n    moduleDirectory: 'node_modules',\n    preserveSymlinks: true\n}\n```\n\n## resolve.isCore(pkg)\n\nReturn whether a package is in core.\n\n# install\n\nWith [npm](https://npmjs.org) do:\n\n```sh\nnpm install resolve\n```\n\n# license\n\nMIT\n",
  "readmeFilename": "readme.markdown",
  "repository": {
    "type": "git",
    "url": "git://github.com/browserify/resolve.git"
  },
  "scripts": {
    "lint": "eslint .",
    "posttest": "npm run test:multirepo",
    "prepublish": "safe-publish-latest",
    "pretest": "npm run lint",
    "pretests-only": "cd ./test/resolver/nested_symlinks && node mylib/sync && node mylib/async",
    "test": "npm run --silent tests-only",
    "test:multirepo": "cd ./test/resolver/multirepo && npm install && npm test",
    "tests-only": "tape test/*.js"
  },
  "version": "1.14.2"
}
